// 단어 게임용 단어 목록
const WORD_LIST = {
    // 초성게임용 단어 (초성별로 분류)
    초성단어: {
        // 2글자 (쉬움)
        'ㅅㄹ': ['사람', '서랍', '수련', '사랑', '시력', '설렁', '소리', '사례', '시련', '수력'],
        'ㄱㅁ': ['가문', '거문', '고민', '구멍', '기면', '국민', '금메달', '기말', '과목', '공명'],
        'ㅂㅅ': ['방송', '분산', '백설', '변수', '보석', '방식', '법사', '발신', '북쪽', '반성'],
        
        // 3글자 (보통)
        'ㅅㅎㅂ': ['수학박사', '소화불량', '서해바다', '생활방식', '신혼부부'],
        'ㄱㅅㅈ': ['가수진', '감사장', '검사장', '고속전철', '국세청'],
        'ㅁㄹㅇ': ['물러앉다', '머리아픔', '미래예측', '무료영화', '말라위'],
        
        // 4글자 (어려움)
        'ㅎㄱㅅㅈ': ['한국수자원', '학교생활지도', '환경생존지수'],
        'ㅂㄹㅁㅊ': ['법률문제처리', '비례민주체제', '보라매축구장']
    },
    
    // 끝말잇기용 단어
    끝말잇기: {
        // 일반 단어 (자주 사용)
        common: [
            '사과', '과일', '일본', '본가', '가방', '방송', '송이', '이발', '발가락', '락커',
            '컴퓨터', '터미널', '널뛰기', '기차', '차이', '이불', '불꽃', '꽃병', '병원', '원숭이',
            '바나나', '나무', '무지개', '개구리', '리본', '본격', '격자', '자전거', '거북이', '이웃',
            '학교', '교실', '실내', '내일', '일기', '기도', '도시', '시장', '장미', '미소',
            '친구', '구름', '름', '음악', '악기', '기타', '타조', '조개', '개미', '미술',
            '한국', '국가', '가족', '족보', '보물', '물고기', '기러기', '기운', '운동', '동물',
            '게임', '임금', '금메달', '달력', '력사', '사람', '람보', '보고서', '서울', '울산',
            '영화', '화분', '분필', '필통', '통장', '장갑', '갑자기', '기분', '분노', '노래',
            '음식', '식당', '당근', '근육', '육아', '아이', '이야기', '기계', '계란', '란초',
            '선생님', '님비', '비행기', '기린', '린스', '스키', '키보드', '드라마', '마법', '법률'
        ],
        
        // 어려운 단어 (고급)
        hard: [
            '민주주의', '의료보험', '험악하다', '다다익선', '선거제도', '도덕경', '경제학자',
            '자본주의', '의무교육', '육체노동', '동아시아', '아날로그', '그리스도', '도서관리',
            '리더십', '십자군', '군사전략', '략탈하다', '다원주의', '의식주', '주식투자',
            '과학기술', '술라이만', '만물박사', '사회복지', '지구온난', '난폭하다', '다람쥐',
            '쥐돌이', '이슬람교', '교육과정', '정치경제', '제3세계', '계몽주의', '의학박사'
        ],
        
        // 한방단어 방어용 (한방단어로 끝나는 단어들의 대응)
        defense: {
            '슘': ['오스뮴', '프라세오디뮴', '사마륨', '홀뮴'],
            '듐': ['라듐', '인듐', '로듐', '팔라듐', '이리듐'],
            '퀸': ['퀸', '하이퀸'],
            '틴': ['틴', '케라틴', '젤라틴', '마틴'],
            '늄': ['알루미늄', '티타늄', '바나듐', '셀레늄', '텔루륨']
        }
    },
    
    // 봇 전용 단어 목록 (난이도별)
    botWords: {
        쉬움: {
            초성: ['사과', '바나나', '학교', '친구', '컴퓨터', '게임', '음악', '영화', '한국', '김치'],
            끝말잇기: ['사과', '과일', '일본', '본가', '가방', '방송', '송이', '이발', '발가락', '락커']
        },
        보통: {
            초성: ['대한민국', '인공지능', '프로그램', '컴퓨터게임', '스마트폰', '인터넷', '소프트웨어'],
            끝말잇기: ['컴퓨터', '터미널', '널뛰기', '기차', '차이', '이불', '불꽃', '꽃병', '병원', '원숭이']
        },
        어려움: {
            초성: ['양자역학', '미분적분학', '철학자', '경제학자', '천체물리학', '생명공학', '나노기술'],
            끝말잇기: ['민주주의', '의료보험', '험악하다', '다다익선', '선거제도', '도덕경', '경제학자']
        }
    },
    
    // 주제별 단어 (향후 주제 모드 추가시 사용)
    themes: {
        동물: ['강아지', '고양이', '토끼', '사자', '호랑이', '코끼리', '기린', '원숭이', '돌고래', '펭귄'],
        음식: ['김치', '불고기', '비빔밥', '김밥', '떡볶이', '순대', '삼겹살', '갈비', '냉면', '설렁탕'],
        나라: ['대한민국', '일본', '중국', '미국', '영국', '프랑스', '독일', '이탈리아', '스페인', '브라질'],
        과학: ['원자', '분자', '전자', '양성자', '중성자', '화학', '물리학', '생물학', '지구과학', '천문학']
    }
};

// 단어 검증용 전체 단어 세트
const ALL_WORDS = new Set([
    ...WORD_LIST.끝말잇기.common,
    ...WORD_LIST.끝말잇기.hard,
    ...Object.values(WORD_LIST.끝말잇기.defense).flat(),
    ...Object.values(WORD_LIST.초성단어).flat(),
    ...Object.values(WORD_LIST.botWords).flatMap(level => [...level.초성, ...level.끝말잇기]),
    ...Object.values(WORD_LIST.themes).flat()
]);

// 초성 추출 함수
function extractChosung(word) {
    const cho = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];
    let result = '';
    
    for (let i = 0; i < word.length; i++) {
        const code = word.charCodeAt(i) - 44032;
        if (code > -1 && code < 11172) {
            result += cho[Math.floor(code / 588)];
        }
    }
    
    return result;
}

// 초성에 맞는 단어 찾기
function findWordsByChosung(chosung) {
    const words = [];
    for (const word of ALL_WORDS) {
        if (extractChosung(word) === chosung) {
            words.push(word);
        }
    }
    return words;
}

// 끝말잇기 가능한 단어 찾기
function findWordsByStartChar(startChar, usedWords = new Set()) {
    const words = [];
    for (const word of ALL_WORDS) {
        if (word.startsWith(startChar) && !usedWords.has(word)) {
            words.push(word);
        }
    }
    return words;
}

module.exports = {
    WORD_LIST,
    ALL_WORDS,
    extractChosung,
    findWordsByChosung,
    findWordsByStartChar
};